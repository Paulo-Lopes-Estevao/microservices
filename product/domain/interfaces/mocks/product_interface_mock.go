// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/repository/product_interface_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductInterfaceRpository is a mock of ProductInterfaceRpository interface.
type MockProductInterfaceRpository struct {
	ctrl     *gomock.Controller
	recorder *MockProductInterfaceRpositoryMockRecorder
}

// MockProductInterfaceRpositoryMockRecorder is the mock recorder for MockProductInterfaceRpository.
type MockProductInterfaceRpositoryMockRecorder struct {
	mock *MockProductInterfaceRpository
}

// NewMockProductInterfaceRpository creates a new mock instance.
func NewMockProductInterfaceRpository(ctrl *gomock.Controller) *MockProductInterfaceRpository {
	mock := &MockProductInterfaceRpository{ctrl: ctrl}
	mock.recorder = &MockProductInterfaceRpositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInterfaceRpository) EXPECT() *MockProductInterfaceRpositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductInterfaceRpository) CreateProduct(name string, price float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", name, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductInterfaceRpositoryMockRecorder) CreateProduct(name, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductInterfaceRpository)(nil).CreateProduct), name, price)
}
